local ffi = require("ffi")
local Proto = {}

Proto.Core = { ["__meta"] = {} }
Proto.Core.__meta.__index =
    function(ct,key)
        if key == "regs" then
            local regs = { ["_parent"] = ct }
            local function reg_lookup(regs,...)
                local self = regs._parent
                local arg = {...}
                local index = arg[1]
                if #arg == 1 then
                    local output = ffi.new("unsigned long[1]")
                    self:peekReg(index, output)
                    return output[0]
                else
                    local value = arg[2]
                    self:pokeReg(index, value)
                end
            end

            local regs_meta = {
                ["__index"] = reg_lookup,
                ["__newindex"] = reg_lookup,
            }

            setmetatable(regs, regs_meta)
            return regs
        end
        return nil
    end

for _,stem in ipairs({ "Model", "Core" }) do
    Proto[stem] = Proto[stem] or {}
    local proto = Proto[stem]
    local impl = ffi.load("impl-" .. stem)
    local get_h = "get_header_" .. stem .. "_h_"
    local get_m = "get_methods_" .. stem .. "_txt_"
    ffi.cdef("const char * " .. get_h .. "();");
    ffi.cdef("const char * " .. get_m .. "();");
    ffi.cdef(ffi.string(impl[get_h]()))

    -- create Lua entry points for C wrappers for C++ virtual calls
    for f in string.gmatch(ffi.string(impl[get_m]()), "%S+") do
        proto[f] = function(self, ...)
            return impl[stem .. "__" .. f](self, ...)
        end
    end

    local handlers = {
        ["__index"] = function(ct,key)
            if proto.__meta and proto.__meta.__index then
               return proto.__meta.__index(ct,key) or proto[key]
            end
            return proto[key]
        end,
        ["__newindex"] = proto,
    }
    ffi.metatype(stem, handlers)
end

ffi.cdef[[
int model_api_ver();
Model *model_ctor(const char *);
int model_dtor(Model *);
]]

Proto.Model.create = function(proto,libstem,name)
    local lib = ffi.load(libstem)
    local self = lib.model_ctor(name)
    self._lib = lib
    self._ver = lib.model_api_ver()
    return ffi.gc(self,self._lib.model_dtor)
end

-- wrap existing autogenerated addCycleCallback to drop userdata, since we can
-- rely on closures instead. If a clear need for an argument arises, the
-- argument can be restored (or _addCycleCallback can be used), but a manual
-- ffi.cast() will still be required to make most cases useful.
Proto.Model._addCycleCallback = Proto.Model.addCycleCallback
Proto.Model.addCycleCallback = function(self,cb)
    return self:_addCycleCallback(cb, nil)
end

-- wrap addStepCallback in the same way as Model:addCycleCallback
Proto.Core._addStepCallback = Proto.Core.addStepCallback
Proto.Core.addStepCallback = function(self,cb)
    return self:_addStepCallback(cb, nil)
end

return Proto.Model

